service: AWSSelfLearning

provider:
  name: aws
  runtime: java8
  region: ap-southeast-2
  versionFunctions: false
  profile: tw-aws-beach

  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - sns:*
        - sqs:*
        - logs:*
        - cloudwatch:*
      Resource: "*"

package:
  artifact: build/libs/hello-sqs-sns.jar

functions:
  Lambda1:
    handler: basic.Lambda1
    timeout: 300
    reservedConcurrency: 100
    events:
      - sns:
          arn: !Ref BasicTopic
          topicName: BasicTopic

  Lambda2:
    handler: basic.Lambda2
    timeout: 300
    reservedConcurrency: 100
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - LambdaQueue
              - Arn
          batchSize: 1

resources:
  Resources:
    BasicEventRule:
      Type: AWS::Events::Rule
      Properties:
        ScheduleExpression: cron(0 9 ? * 2#1 *) #cron(0/5 * ? * MON-FRI *)
        Description: EventRuleForSns
        State: ENABLED
        Targets:
          - Arn:
              Ref: BasicTopic
            Id: targetSnsV1

    BasicTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: sns:Publish
              Resource: '*'
        Topics:
          - !Ref BasicTopic

    BasicTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: MyCustomTopic
        Subscription:
          - Endpoint: jiajie.ma@thoughtworks.com
            Protocol: email

    LambdaQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: sns-sqs-lambda-message-queue
        VisibilityTimeout: 300
        MessageRetentionPeriod: 604800

    SQSSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !Ref BasicTopic
        Endpoint: !GetAtt
          - LambdaQueue
          - Arn
        Protocol: sqs
        RawMessageDelivery: 'true'


    SampleSQSPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref LambdaQueue
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action: SQS:SendMessage
              Resource: '*'
              Principal:
                Service: sns.amazonaws.com
